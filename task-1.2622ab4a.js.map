{"version":3,"sources":["js/task-1.js"],"names":["console","log","intervalId","secund","refs","hours","document","querySelector","minutes","secunds","targetTimer","save","timestamp","onTimerClick","e","target","textContent","clearInterval","setInterval","convertS","s","Math","floor","innerHTML","toString","padStart","printTimestamp","insertAdjacentHTML","addEventListener","imitatedServer","then","res","times","push","catch","key","type","data","Promise","rej","setTimeout","random","JSON","parse","localStorage","getItem","setItem","stringify","min","max","getRandomInt","forEach"],"mappings":";AAAAA,QAAQC,IAAI,UACZ,IACIC,EADAC,EAAS,EAGb,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,UAC9BC,QAASF,SAASC,cAAc,YAChCE,QAASH,SAASC,cAAc,YAChCG,YAAaJ,SAASC,cAAc,iBACpCI,KAAML,SAASC,cAAc,SAC7BK,UAAWN,SAASC,cAAc,eAiBpC,SAASM,EAAaC,GACS,SAAzBA,EAAEC,OAAOC,aACXC,cAAcf,GACdY,EAAEC,OAAOC,YAAc,UAEvBd,EAAagB,YAAY,KAEvBC,EADAhB,GAAU,IAET,KACHW,EAAEC,OAAOC,YAAc,QAI3B,SAASG,EAASC,GACVf,MAAAA,EAAQgB,KAAKC,MAAMF,EAAI,GAAK,IAClCA,GAAQ,KAAUf,EACZG,MAAAA,EAAUa,KAAKC,MAAMF,EAAI,IAEzBX,EADNW,GAAQ,GAAKZ,EAEbJ,EAAKC,MAAMkB,UAAYlB,EAAMmB,WAAWC,SAAS,EAAG,GACpDrB,EAAKI,QAAQe,UAAYf,EAAQgB,WAAWC,SAAS,EAAG,GACxDrB,EAAKK,QAAQc,UAAYd,EAAQe,WAAWC,SAAS,EAAG,GAG1D,SAASC,EAAeN,GAChBf,MAAAA,EAAQgB,KAAKC,MAAMF,EAAI,GAAK,IAClCA,GAAQ,KAAUf,EACZG,MAAAA,EAAUa,KAAKC,MAAMF,EAAI,IAEzBX,EADNW,GAAQ,GAAKZ,EAEbJ,EAAKQ,UAAUe,mBACb,mBACOtB,EAAMmB,WAAWC,SAAS,EAAG,MAAMjB,EAAQgB,WAAWC,SAAS,EAAG,MAAMhB,EAC5Ee,WACAC,SAAS,EAAG,WAhDnBrB,EAAKO,KAAKiB,iBAAiB,QAASd,IAClCe,EAAe,SACZC,KAAKC,IACEC,MAAAA,EAAgB,OAARD,EAAe,GAAKA,EAE3BC,OADPA,EAAMC,KAAK9B,GACJ6B,IAERF,KAAKE,GAASH,EAAe,QAAS,MAAOG,IAE7CE,MAAMlC,QAAQC,OAGnBG,EAAKM,YAAYkB,iBAAiB,QAASf,GAwC3C,MAAMgB,EAAiB,CAACM,EAAKC,EAAO,MAAOC,EAAO,MAGzC,OAAA,IAAIC,QAAQ,CAACP,EAAKQ,KACvBC,WAAW,KACLnB,KAAKoB,SAAW,GACL,QAATL,EACFL,EAAIW,KAAKC,MAAMC,aAAaC,QAAQV,KAClB,QAATC,GACTQ,aAAaE,QAAQX,EAAKO,KAAKK,UAAUV,IACzCN,GAAI,IAEJQ,EAAI,gBAEDA,EAAI,YAbM,EAACS,EAAKC,IAAQ5B,KAAKC,MAAMD,KAAKoB,UAAYQ,EAAMD,GAAOA,GAcvEE,CAAa,IAAM,SAI1BrB,EAAe,SACZC,KAAKE,IACU,OAAVA,IACJhC,QAAQC,IAAI+B,GACZA,EAAMmB,QAAQzB,MAEfQ,MAAMlC,QAAQC","file":"task-1.2622ab4a.js","sourceRoot":"../src","sourcesContent":["console.log(\"OK - 1\");\nlet secund = 0;\nlet intervalId;\n\nconst refs = {\n  hours: document.querySelector('#hours'),\n  minutes: document.querySelector('#minutes'),\n  secunds: document.querySelector('#secunds'),\n  targetTimer: document.querySelector('#target-timer'),\n  save: document.querySelector('#save'),\n  timestamp: document.querySelector('#timestamp'),\n};\n\nrefs.save.addEventListener('click', e => {\n  imitatedServer('times')\n    .then(res => {\n      const times = res === null ? [] : res;\n      times.push(secund);\n      return times;\n    })\n    .then(times => imitatedServer('times', 'SET', times))\n\n    .catch(console.log);\n});\n\nrefs.targetTimer.addEventListener('click', onTimerClick);\n\nfunction onTimerClick(e) {\n  if (e.target.textContent === 'Stop') {\n    clearInterval(intervalId);\n    e.target.textContent = 'Start';\n  } else {\n    intervalId = setInterval(() => {\n      secund += 1;\n      convertS(secund);\n    }, 1000);\n    e.target.textContent = 'Stop';\n  }\n}\n\nfunction convertS(s) {\n  const hours = Math.floor(s / 60 / 60);\n  s = s - 60 * 60 * hours;\n  const minutes = Math.floor(s / 60);\n  s = s - 60 * minutes;\n  const secunds = s;\n  refs.hours.innerHTML = hours.toString().padStart(2, 0);\n  refs.minutes.innerHTML = minutes.toString().padStart(2, 0);\n  refs.secunds.innerHTML = secunds.toString().padStart(2, 0);\n}\n\nfunction printTimestamp(s) {\n  const hours = Math.floor(s / 60 / 60);\n  s = s - 60 * 60 * hours;\n  const minutes = Math.floor(s / 60);\n  s = s - 60 * minutes;\n  const secunds = s;\n  refs.timestamp.insertAdjacentHTML(\n    'beforeend',\n    `<li>${hours.toString().padStart(2, 0)}:${minutes.toString().padStart(2, 0)}:${secunds\n      .toString()\n      .padStart(2, 0)}</li>`,\n  );\n}\n\nconst imitatedServer = (key, type = 'GET', data = {}) => {\n  const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      if (Math.random() > 0.1) {\n        if (type === 'GET') {\n          res(JSON.parse(localStorage.getItem(key)));\n        } else if (type === 'SET') {\n          localStorage.setItem(key, JSON.stringify(data));\n          res(true);\n        } else {\n          rej('invalid type');\n        }\n      } else rej('oops!!!');\n    }, getRandomInt(1000, 5000));\n  });\n};\n\nimitatedServer('times')\n  .then(times => {\n    if (times === null) return;\n    console.log(times);\n    times.forEach(printTimestamp);\n  })\n  .catch(console.log);"]}